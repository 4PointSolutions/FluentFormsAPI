{
  "id" : "00a42460-ec46-4cee-94e6-33ea44869f87",
  "name" : "etc.clientlibs_clientlibs_granite_jquery_granite_csrf.js",
  "request" : {
    "url" : "/etc.clientlibs/clientlibs/granite/jquery/granite/csrf.js",
    "method" : "GET"
  },
  "response" : {
    "status" : 200,
    "base64Body" : "",
    "headers" : {
      "X-Content-Type-Options" : "nosniff",
      "Last-Modified" : "Sat, 03 May 2025 13:47:20 GMT",
      "Date" : "Sun, 11 May 2025 11:23:44 GMT",
      "Content-Type" : "application/javascript;charset=utf-8"
    }
  },
  "uuid" : "00a42460-ec46-4cee-94e6-33ea44869f87",
  "persistent" : true,
  "insertionIndex" : 20
}